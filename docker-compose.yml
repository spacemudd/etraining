version: '3'

services:

  backend-web:
    build: ./backend-web
    working_dir: /usr/src/app
    volumes:
      - ./backend:/usr/src/app
      - ./backend-web/cert.crt:/etc/letsencrypt/cert.crt
      - ./backend-web/cert.key:/etc/letsencrypt/cert.key
    ports:
      - 80:8085
    restart: always
    depends_on:
      - backend

  backend:
    build: ./backend
    working_dir: /var/www
    environment:
      - REDIS_HOST=redis-service
      - QUEUE_CONNECTION=redis
      - DB_PORT=3306
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

  backend-worker:
    build:
      context: .
      dockerfile: ./backend-worker.dockerfile
    working_dir: /var/www
    environment:
      - REDIS_HOST=redis-service
      - QUEUE_CONNECTION=redis
      - DB_HOST=database-service
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - redis-service
      - backend

  backend-schedule:
    build:
      context: .
      dockerfile: ./backend-schedule.dockerfile
    working_dir: /var/www
    environment:
      - REDIS_HOST=redis-service
      - QUEUE_CONNECTION=redis
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - backend

  db-service:
    image: mariadb:10.2
    command: '--innodb-flush-method=fsync'
    volumes:
      - ./etraining-db:/var/lib/mysql
    ports:
      - 33066:3306
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}

  redis-service:
    image: redis
    expose:
      - 6379

  npm:
   command: "npm install"
   build:
     context: .
     dockerfile: npm.dockerfile
   working_dir: /var/www/backend
   volumes:
     - ./:/var/www
   ports:
     - "6001:6001"

